// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/suyuan32/simple-admin-file/ent/file"
	"github.com/suyuan32/simple-admin-file/ent/tag"
)

const errInvalidPage = "INVALID_PAGE"

const (
	listField     = "list"
	pageNumField  = "pageNum"
	pageSizeField = "pageSize"
)

type PageDetails struct {
	Page  uint64 `json:"page"`
	Size  uint64 `json:"size"`
	Total uint64 `json:"total"`
}

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

const errInvalidPagination = "INVALID_PAGINATION"

type FilePager struct {
	Order  file.OrderOption
	Filter func(*FileQuery) (*FileQuery, error)
}

// FilePaginateOption enables pagination customization.
type FilePaginateOption func(*FilePager)

// DefaultFileOrder is the default ordering of File.
var DefaultFileOrder = Desc(file.FieldID)

func newFilePager(opts []FilePaginateOption) (*FilePager, error) {
	pager := &FilePager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultFileOrder
	}
	return pager, nil
}

func (p *FilePager) ApplyFilter(query *FileQuery) (*FileQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// FilePageList is File PageList result.
type FilePageList struct {
	List        []*File      `json:"list"`
	PageDetails *PageDetails `json:"pageDetails"`
}

func (f *FileQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...FilePaginateOption,
) (*FilePageList, error) {

	pager, err := newFilePager(opts)
	if err != nil {
		return nil, err
	}

	if f, err = pager.ApplyFilter(f); err != nil {
		return nil, err
	}

	ret := &FilePageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	count, err := f.Clone().Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		f = f.Order(pager.Order)
	} else {
		f = f.Order(DefaultFileOrder)
	}

	f = f.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type TagPager struct {
	Order  tag.OrderOption
	Filter func(*TagQuery) (*TagQuery, error)
}

// TagPaginateOption enables pagination customization.
type TagPaginateOption func(*TagPager)

// DefaultTagOrder is the default ordering of Tag.
var DefaultTagOrder = Desc(tag.FieldID)

func newTagPager(opts []TagPaginateOption) (*TagPager, error) {
	pager := &TagPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultTagOrder
	}
	return pager, nil
}

func (p *TagPager) ApplyFilter(query *TagQuery) (*TagQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// TagPageList is Tag PageList result.
type TagPageList struct {
	List        []*Tag       `json:"list"`
	PageDetails *PageDetails `json:"pageDetails"`
}

func (t *TagQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...TagPaginateOption,
) (*TagPageList, error) {

	pager, err := newTagPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.ApplyFilter(t); err != nil {
		return nil, err
	}

	ret := &TagPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	count, err := t.Clone().Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		t = t.Order(pager.Order)
	} else {
		t = t.Order(DefaultTagOrder)
	}

	t = t.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}
